<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.1.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    ">
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/db.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name="dataSource" ref="dataSourceBase"></property>
	</bean>
	
	
	
	<!-- 事务控制    start -->
	<!-- 配置atomikos的事务管理器 -->
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <description>UserTransactionImp</description>
        <property name="transactionTimeout" value="3000"/>
    </bean>
    
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" 
    		init-method="init" destroy-method="close">
        <description>UserTransactionManager</description>
        <property name="forceShutdown" value="true"/>
    </bean>
    <!-- spring的JTA事务管理器 -->
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <description>JtaTransactionManager</description>
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
        <property name="allowCustomIsolationLevels" value="true"/>
        <property name="defaultTimeout" value="500000"/>
    </bean> 
    
    <aop:config>
        <aop:pointcut id="interceptorPointCuts" 
        	expression="execution(* com.changyou.sycs..service.*Service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />        
    </aop:config>
    
	<!-- tx标签配置事务   -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<!--  
				将save、delete、modify开头的事务之外的事务全部设置  
				为只读事务，这样可以在一定程序上提高系统性能，也可以根据自己的需求自己定义方法的事务。 
			-->  
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"  />
        </tx:attributes>
    </tx:advice>
    <!-- 
		REQUIRED:业务方法需要在一个容器里运行。如果方法运行时，已经处在一个事务中，那么加入到这个事务，否则自己新建一个新的事务。
		
		NOT_SUPPORTED:声明方法不需要事务。如果方法没有关联到一个事务，容器不会为他开启事务，如果方法在一个事务中被调用，该事务会被挂起，调用结束后，原先的事务会恢复执行。
		
		REQUIRES_NEW:不管是否存在事务，该方法总汇为自己发起一个新的事务。如果方法已经运行在一个事务中，则原有事务挂起，新的事务被创建。
		
		MANDATORY：该方法只能在一个已经存在的事务中执行，业务方法不能发起自己的事务。如果在没有事务的环境下被调用，容器抛出例外。
		
		SUPPORTS:该方法在某个事务范围内被调用，则方法成为该事务的一部分。如果方法在该事务范围外被调用，该方法就在没有事务的环境下执行。
		
		NEVER：该方法绝对不能在事务范围内执行。如果在就抛例外。只有该方法没有关联到任何事务，才正常执行。
		
		NESTED:如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。
     -->
	<!-- 启动注解功能 -->
	<tx:annotation-driven transaction-manager="transactionManager" /> 
	<!-- 事务控制    end -->
	<!-- 
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/view/" />
		<property name="freemarkerSettings">
		    <props>
		        <prop key="template_update_delay">0</prop>
		        <prop key="default_encoding">UTF-8</prop>
		        <prop key="number_format">0.##########</prop>
		        <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
		        <prop key="classic_compatible">true</prop>
		        <prop key="template_exception_handler">ignore</prop>
		    </props>
		</property>
	</bean>
	 -->
	
	
	<!-- Memcached配置 -->
	<!-- 
	<bean id="sockIOPool" class="com.danga.MemCached.SockIOPool"  
        factory-method="getInstance" init-method="initialize" destroy-method="shutDown">  
        <constructor-arg value="sockIOPool"></constructor-arg>  
        <property name="servers">  
            <list>  
                <value>${memcached.server}</value>  
            </list>  
        </property>  
        <property name="initConn"><value>5</value></property>  
        <property name="maxConn"><value>60</value></property>  
        <property name="maintSleep"><value>30</value></property>  
        <property name="nagle"><value>false</value></property>  
        <property name="socketTO"><value>3000</value></property>  
    </bean> 
    
    <bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">  
        <constructor-arg>  
            <value>sockIOPool</value>  
        </constructor-arg>  
    </bean>
    
    <bean id="cacheClient" class="com.changyou.sycs.common.cache.CacheClient">
    	<property name="memcachedClient" ref="memcachedClient" />
    </bean>
    
    <bean id="cacheManager" class="com.changyou.sycs.common.cache.CacheManager">
    	<property name="cacheClient" ref="cacheClient" />
    </bean>
	 -->
    
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">     
        <property name="exceptionMappings">     
            <props>     
                <prop key="java.lang.Exception">500.jsp</prop>     
                <prop key="java.lang.Throwable">500.jsp</prop>     
            </props>     
        </property>     
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->     
        <property name="warnLogCategory" value="WARN"></property>     
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->     
        <property name="defaultErrorView" value="500"></property>     
        <!-- 默认HTTP状态码 -->     
        <property name="defaultStatusCode" value="500"></property>     
    </bean> 
  
    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>  
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<bean id="blogDao" class="com.frank.model.BlogDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	
	
	
	
	
	
	
	
	
	
	
</beans>